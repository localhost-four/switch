"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const UserManager_1 = require("./managers/UserManager");
const SessionManager_1 = require("./managers/SessionManager");
const ScoreManager_1 = require("./managers/ScoreManager");
const TrophyManager_1 = require("./managers/TrophyManager");
const DataStoreManager_1 = require("./managers/DataStoreManager");
const FriendsManager_1 = require("./managers/FriendsManager");
const TimeManager_1 = require("./managers/TimeManager");
class GameJolt {
    /**
     * @param options The options to pass to the client.
     */
    constructor(options) {
        this.gameId = options.gameId;
        this.privateKey = options.privateKey;
        this.authCredentials = options.authCredentials || {
            username: '',
            token: '',
        };
        this.users = new UserManager_1.UserManager(this);
        this.sessions = new SessionManager_1.SessionManager(this);
        this.scores = new ScoreManager_1.ScoreManager(this);
        this.trophies = new TrophyManager_1.TrophyManager(this);
        this.dataStorage = new DataStoreManager_1.DataStoreManager(this);
        this.friends = new FriendsManager_1.FriendsManager(this);
        this.time = new TimeManager_1.TimeManager(this);
        if (options.authCredentials) {
            this.sessions.open();
        }
    }
    /**
     * Login to Game Jolt with username and token.
     *
     * @param credentials The user credentials for authentication.
     */
    login(credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.users.auth(credentials);
            if (response.success) {
                this.authCredentials = credentials;
                this.sessions.open();
            }
            return response;
        });
    }
    /**
     * Logout the current acive user.
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sessions.close();
            if (response.success) {
                this.authCredentials = {
                    username: '',
                    token: '',
                };
            }
            return response;
        });
    }
}
exports.GameJolt = GameJolt;
