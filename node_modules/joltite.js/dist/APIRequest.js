"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const HttpMethods_1 = require("./types/HttpMethods");
const Formats_1 = require("./types/Formats");
const SHA1_1 = require("./util/SHA1");
const constants_1 = require("./util/constants");
const fetch = constants_1.isBrowser ? window.fetch : require('node-fetch');
/**
 * Represents an API request.
 */
class APIRequest {
    /**
     * @param client The Game Jolt client.
     * @param path The path of the API request.
     * @param request The request options.
     */
    constructor(client, path, request = {}) {
        this.client = client;
        this.method = request.method || HttpMethods_1.HttpMethods.GET;
        this.path = path;
        this.body = request.body;
        this.format = request.format || Formats_1.Formats.Json;
    }
    /**
     * Sends a request to the API.
     */
    make() {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `${this.path}&game_id=${this.client.gameId}`;
            if (this.format !== Formats_1.Formats.Json) {
                url += `&format=${this.format}`;
            }
            const signature = yield this.signature(url);
            return fetch(`${url}&signature=${signature}`, {
                method: this.method,
                body: this.body,
            });
        });
    }
    signature(url) {
        return SHA1_1.SHA1(url + this.client.privateKey);
    }
}
exports.APIRequest = APIRequest;
