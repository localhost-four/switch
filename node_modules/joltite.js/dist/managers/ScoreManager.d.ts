import { Response } from '../types/responses/Response';
import { BaseManager } from './BaseManager';
import { ScoreOptions } from '../types/ScoreOptions';
import { ScoreResponse } from '../types/responses/ScoreResponse';
import { ScoreQuery } from '../types/ScoreQuery';
import { TableResponse } from '../types/responses/TableResponse';
import { RankResponse } from '../types/responses/RankResponse';
/**
 * Manager responsible for managing the API methods of scores.
 */
export declare class ScoreManager extends BaseManager {
    /**
     * Adds a score for a user or guest.
     * @param score This is a string value associated with the score.
     * @param sort This is a numerical sorting value associated with the score. All sorting will be based on this number.
     * @param options Extra score options.
     */
    add(score: string, sort: number, options?: ScoreOptions): Promise<Response>;
    /**
     * Returns a list of scores either for a user or globally for a game.
     *
     * @param query The query options for fetching scores.
     */
    fetch(query?: ScoreQuery): Promise<ScoreResponse>;
    /**
     * Returns the rank of a particular score on a score table.
     *
     * @param sort This is a numerical sorting value that is represented by a rank on the score table.
     * @param tableId The ID of the score table from which you want to get the rank.
     */
    getRank(sort: number, tableId?: number): Promise<RankResponse>;
    /**
     * Returns a list of high score tables for a game.
     */
    tables(): Promise<TableResponse>;
    private guestOrUser;
}
