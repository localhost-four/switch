"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("./BaseManager");
const constants_1 = require("../util/constants");
/**
 * Manager responsible for managing the API methods of sessions.
 * Sessions are used to tell Game Jolt when a user is playing a game,
 * and what state they are in while playing (active or idle).
 */
class SessionManager extends BaseManager_1.BaseManager {
    constructor() {
        super(...arguments);
        this.status = 'active';
    }
    /**
     * Sets the session status.
     */
    set isActive(active) {
        this.status = active ? 'active' : 'idle';
    }
    /**
     * Opens a game session for a particular user and allows you to tell Game Jolt
     * that a user is playing your game.
     */
    open() {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            const response = (yield this.request(constants_1.Endpoints.sessions.open(username, token)));
            if (response.success) {
                const pingInterval = 30 * 1000;
                setInterval(() => this.ping(), pingInterval);
            }
            return response;
        });
    }
    /**
     * Pings an open session to tell the system that it's still active.
     * If the session hasn't been pinged within 120 seconds,
     * the system will close the session and you will have to open another one.
     */
    ping() {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            const response = (yield this.request(constants_1.Endpoints.sessions.ping(username, token, this.status)));
            return response;
        });
    }
    /**
     * Closes the active session.
     */
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            const response = (yield this.request(constants_1.Endpoints.sessions.close(username, token)));
            return response;
        });
    }
}
exports.SessionManager = SessionManager;
