"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("./BaseManager");
const constants_1 = require("../util/constants");
/**
 * Manager responsible for managing the API methods of trophies.
 */
class TrophyManager extends BaseManager_1.BaseManager {
    constructor() {
        super(...arguments);
        /**
         * Trophies returned from the API. Populated when {@link TrophyManager#fetch} is called.
         */
        this.fetchedTrophies = [];
    }
    /**
     * Returns one trophy or multiple trophies.
     *
     * @param [achieved] Whether to fetch only achieved trophies.
     */
    fetch(achieved) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            let endpoint = constants_1.Endpoints.trophies.fetch(username, token);
            if (achieved) {
                endpoint += `&achieved=${achieved}`;
            }
            const response = (yield this.request(endpoint));
            if (response && response.trophies) {
                this.fetchedTrophies = response.trophies;
            }
            return response;
        });
    }
    /**
     * Returns one trophy or multiple trophies by Id.
     *
     * @param trophyIds The IDs of the trophies to fetch.
     */
    fetchById(trophyIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            const ids = typeof trophyIds === 'number' ? [trophyIds] : trophyIds;
            const response = (yield this.request(`${constants_1.Endpoints.trophies.fetch(username, token)}&trophy_id=${ids.join()}`));
            return response;
        });
    }
    /**
     * Sets a trophy as achieved for a particular user.
     *
     * @param trophyId The ID of the trophy to add for the user.
     */
    addAchieved(trophyId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            const response = (yield this.request(`${constants_1.Endpoints.trophies.add(username, token, trophyId)}`));
            return response;
        });
    }
    /**
     * Remove a previously achieved trophy for a particular user.
     *
     * @param trophyId The ID of the trophy to remove from the user.
     */
    removeAchieved(trophyId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            const response = (yield this.request(`${constants_1.Endpoints.trophies.remove(username, token, trophyId)}`));
            return response;
        });
    }
}
exports.TrophyManager = TrophyManager;
