"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../util/constants");
const BaseManager_1 = require("./BaseManager");
/**
 * Manager responsible for managing the API methods of users.
 */
class UserManager extends BaseManager_1.BaseManager {
    /**
     * Authenticates the user's information.
     * This should be done before you make any calls for the user,
     * to make sure the user's credentials (username and token) are valid.
     *
     * @param authCredentials The credentials required to authenticate a user.
     */
    auth(authCredentials) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = authCredentials;
            const response = (yield this.request(constants_1.Endpoints.users.auth(username, token)));
            return response;
        });
    }
    /**
     * Returns a user's data.
     *
     * @param users The ids of the users to fetch.
     */
    fetch(users) {
        return __awaiter(this, void 0, void 0, function* () {
            const ids = typeof users === 'number' ? [users] : users;
            const response = (yield this.request(constants_1.Endpoints.users.fetch(ids)));
            return response;
        });
    }
}
exports.UserManager = UserManager;
