"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const APIRequest_1 = require("../APIRequest");
const Formats_1 = require("../types/Formats");
const constants_1 = require("../util/constants");
/**
 * Base manager responsible for managing
 * the API methods of a data model.
 */
class BaseManager {
    /**
     * @param client The Game Jolt client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Sends a request to the API.
     * @param url The url of the api request.
     * @param request The request options.
     */
    request(url, request = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = constants_1.apiBase + encodeURI(url);
            const apiRequest = new APIRequest_1.APIRequest(this.client, endpoint, request);
            const apiResponse = yield apiRequest.make();
            let response;
            if (apiRequest.format === Formats_1.Formats.Json) {
                const json = (yield apiResponse.json()).response;
                json.success = json.success === 'true';
                response = json;
            }
            else {
                response = apiResponse.text();
            }
            return response;
        });
    }
}
exports.BaseManager = BaseManager;
