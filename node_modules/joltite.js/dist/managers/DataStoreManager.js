"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseManager_1 = require("./BaseManager");
const constants_1 = require("../util/constants");
/**
 * Manager responsible for managing the API methods of data storage.
 */
class DataStoreManager extends BaseManager_1.BaseManager {
    /**
     * Returns data from the data store.
     *
     * @param key The key of the data item you'd like to fetch.
     * @param [user] Whether to fetch user data store item.
     */
    fetch(key, user) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            let endpoint = constants_1.Endpoints.dataStorage.fetch(key);
            if (user) {
                endpoint += `&username=${username}&user_token=${token}`;
            }
            const response = (yield this.request(endpoint));
            return response;
        });
    }
    /**
     * Sets data in the data store.
     *
     * @param key The key of the data item you'd like to set.
     * @param data The data you'd like to set.
     * @param [user] Whether to set a user data store item.
     */
    set(key, data, user) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            let endpoint = constants_1.Endpoints.dataStorage.set(key, data);
            if (user) {
                endpoint += `&username=${username}&user_token=${token}`;
            }
            const response = (yield this.request(endpoint));
            return response;
        });
    }
    /**
     * Updates data in the data store.
     * @param key The key of the data item you'd like to update.
     * @param value	The value you'd like to apply to the data store item.
     * @param operation The operation you'd like to perform.
     * @param [user] Whether this is a user data store item.
     */
    update(key, value, operation, user) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            let endpoint = constants_1.Endpoints.dataStorage.update(key, operation, value);
            if (user) {
                endpoint += `&username=${username}&user_token=${token}`;
            }
            const response = (yield this.request(endpoint));
            return response;
        });
    }
    /**
     * Removes data from the data store.
     *
     * @param key The key of the data item you'd like to remove.
     * @param [user] Whether to remove a user data store item.
     */
    remove(key, user) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            let endpoint = constants_1.Endpoints.dataStorage.remove(key);
            if (user) {
                endpoint += `&username=${username}&user_token=${token}`;
            }
            const response = (yield this.request(endpoint));
            return response;
        });
    }
    /**
     * Returns either all the keys in the game's global data store, or all the keys in a user's data store.
     *
     * @param [user] Whether to fetch user data store item.
     * @param [pattern] The pattern to apply to the key names in the data store.
     */
    getKeys(user, pattern) {
        return __awaiter(this, void 0, void 0, function* () {
            const { username, token } = this.client.authCredentials;
            let endpoint = constants_1.Endpoints.dataStorage.getKeys();
            if (user) {
                endpoint += `&username=${username}&user_token=${token}`;
            }
            if (pattern) {
                endpoint += `&pattern=${pattern}`;
            }
            const response = (yield this.request(endpoint));
            return response;
        });
    }
}
exports.DataStoreManager = DataStoreManager;
