"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
/**
 * Creates a sha-1 hash using the Web Crypto API.
 *
 * @param message The message to hash.
 */
function subtleCrypto(message) {
    return __awaiter(this, void 0, void 0, function* () {
        const encoder = new TextEncoder();
        const hashBuffer = yield crypto.subtle.digest('SHA-1', encoder.encode(message));
        const hashData = Array.from(new Uint8Array(hashBuffer));
        return hashData.map((b) => b.toString(16).padStart(2, '0')).join('');
    });
}
/**
 * Creates a sha-1 hash using the node crypto module.
 *
 * @param message The message to hash.
 */
function nodeCrypto(message) {
    const hash = require('crypto').createHash('sha1');
    hash.update(message);
    return hash.digest('hex');
}
/**
 * Creates a sha-1 hash.
 *
 * @param message The message to hash.
 */
function SHA1(message) {
    return __awaiter(this, void 0, void 0, function* () {
        return constants_1.isBrowser && window.crypto.subtle
            ? subtleCrypto(message)
            : nodeCrypto(message);
    });
}
exports.SHA1 = SHA1;
